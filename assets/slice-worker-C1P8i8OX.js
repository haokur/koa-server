var x=Object.defineProperty;var B=(c,e,s)=>e in c?x(c,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):c[e]=s;var d=(c,e,s)=>B(c,typeof e!="symbol"?e+"":e,s);import{d as F}from"./file.util-CaGBcmvQ.js";import{d as E,c as N,a as n,F as A,e as P,p as S,q as U,g as j,_ as z}from"./index-L1yGkUwH.js";class C{constructor(e,s){d(this,"channels",[]);d(this,"tasks",[]);d(this,"channelMaxNum",0);d(this,"channelInit");d(this,"finishCallback");d(this,"isPause",!1);this.channelMaxNum=e,this.channelInit=s}onFinished(e){return this.finishCallback=e,this}addManyTasks(e,s){return this.tasks=e.map((l,k)=>({task:l,callback:s,status:0,index:k})),this}checkChannel(){if(!(this.channels.length>=this.channelMaxNum)&&this.channels.length<this.tasks.length){const s=Math.min(this.tasks.length,this.channelMaxNum);for(let l=this.channels.length;l<s;l++)this.channels.push({index:l,status:0,channelInstance:this.channelInit()})}}runTask(){this.isPause||(this.checkChannel(),!this.tasks.length&&this.channels.every(e=>e.status===0)&&this.finishCallback&&this.finishCallback(),this.channels.forEach(e=>{if(e.status===0&&this.tasks.length){e.status=1;const s=this.tasks.shift(),{task:l,callback:k,index:b}=s;s.status=1,k(e,l,b).then(()=>{e.status=0,s.status=2,this.runTask()})}}))}run(){return this.isPause=!1,this.runTask(),this}pause(){this.isPause=!0}clear(){this.isPause=!0,this.tasks=[],this.channels=[]}}function W(){return Date.now().toString(36)+Math.random().toString(36).substr(2)}class M{constructor(e){d(this,"resolves");d(this,"worker");this.worker=new Worker(e),this.worker.onmessage=this.handleMessage.bind(this),this.worker.onerror=this.handlerError.bind(this),this.resolves=new Map}handleMessage(e){const{_id:s,payload:l}=e.data;this.resolves.has(s)&&(this.resolves.get(s)(l),this.resolves.delete(s))}handlerError(e){console.log("webworker error",e)}postMessage(e){return new Promise(s=>{const l=W(),k={_id:l,payload:e};this.worker.postMessage(k),this.resolves.set(l,s)})}}var v={title:"生产环境",baseUrl:"https://api.haokur.com",workerBaseUrl:"workers"};const m=c=>(S("data-v-460871b0"),c=c(),U(),c),$=m(()=>n("div",{class:"mb20 intro"},[j(" 实测发现： "),n("p",null," 1、在小文件，少文件，使用同步处理的时间会更优于使用webworker处理，因为开启webworker会有损耗，通信也会有消耗 "),n("p",null,"2、使用webworker不会阻塞渲染进程，在进行slice时，不会阻碍刷新渲染"),n("p",null,"3、当处理的量级上去之后，比如8个大文件要进行切割，使用webworker的优势才开始显现"),n("p",null,"4、打开控制台，可以看到console.time打印的耗时")],-1)),q={class:"slice-worker"},D={class:"mb20"},L=m(()=>n("label",{for:""},"直接文件切割",-1)),V={class:"mb20"},G=m(()=>n("label",{for:""},"webworker文件切割-任务大数组",-1)),H={class:"mb20"},J=m(()=>n("label",{for:""},"webworker文件切割-任务二维数组（减少webworker通信）",-1)),K={class:"mb20"},O=m(()=>n("label",{for:""},"多文件同步slice",-1)),Q={class:"mb20"},R=m(()=>n("label",{for:""},"多文件webworker-slice",-1)),T=.4*1024*1024,X=E({__name:"slice-worker",setup(c){const e=i=>{const a=Math.ceil(i.size/T),o=navigator.hardwareConcurrency||4;let r=[];for(let t=0;t<a;t++)r.push({index:t,start:t*T,end:Math.min((t+1)*T,i.size)});return{allTasks:r,workerNum:o}},s=async i=>{const a=i.target.files[0],{allTasks:o}=e(a);console.time("普通切割耗时：");for(let r=0;r<o.length;r++){let{start:t,end:h}=o[r];a.slice(t,h)}console.timeEnd("普通切割耗时：")},l=async i=>{const a=i.target.files[0],{allTasks:o,workerNum:r}=e(a),t=[];console.time("webworker，任务不分组切割");const h=new C(r,()=>new M(`${v.workerBaseUrl}/slice-helper.js`)).onFinished(()=>{console.timeEnd("webworker，任务不分组切割"),F(t,a.name),h.clear()}).addManyTasks(o,async(w,g,f)=>{const p=w.channelInstance,{start:u,end:_}=g;let y=await p.postMessage({action:"sliceFile",file:a,start:u,end:_});t.push(y)}).run()},k=async i=>{const a=i.target.files[0],{allTasks:o,workerNum:r}=e(a),t=[];let h=Math.ceil(o.length/r);for(let f=0;f<r;f++){let p=[];for(let u=0;u<h;u++){let _=f*h+u;o[_]&&p.push(o[_])}t.push(p)}console.time("webworker任务分组切割");const w=[],g=new C(r,()=>new M(`${v.workerBaseUrl}/slice-helper.js`)).onFinished(()=>{console.timeEnd("webworker任务分组切割");let f=w.reduce((p,u)=>p.concat(u),[]);F(f,a.name),g.clear()}).addManyTasks(t,async(f,p,u)=>{let y=await f.channelInstance.postMessage({action:"sliceFileMany",file:a,chunks:p});w[u]=y}).run()},b=async i=>{const a=i.target.files;console.time("普通切割耗时："),Array.from(a).forEach(o=>{const{allTasks:r}=e(o);for(let t=0;t<r.length;t++){let{start:h,end:w}=r[t];o.slice(h,w)}}),console.timeEnd("普通切割耗时：")},I=async i=>{const a=i.target.files,o=Array.from(a);console.time("webworker，按文件分别分组切割"),new C(8,()=>new M(`${v.workerBaseUrl}/slice-helper.js`)).onFinished(()=>{console.timeEnd("webworker，按文件分别分组切割")}).addManyTasks(o,async(r,t,h)=>{const w=r.channelInstance,{allTasks:g}=e(t);await w.postMessage({action:"sliceFileByTasks",file:t,allTasks:g})}).run()};return(i,a)=>(P(),N(A,null,[$,n("div",q,[n("div",D,[L,n("input",{type:"file",onChange:s},null,32)]),n("div",V,[G,n("input",{type:"file",onChange:l},null,32)]),n("div",H,[J,n("input",{type:"file",onChange:k},null,32)]),n("div",K,[O,n("input",{type:"file",multiple:"",onChange:b},null,32)]),n("div",Q,[R,n("input",{type:"file",multiple:"",onChange:I},null,32)])])],64))}}),se=z(X,[["__scopeId","data-v-460871b0"]]);export{se as default};
